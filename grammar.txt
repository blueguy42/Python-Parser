Terminals:
input print exit # type global str int float complex list tuple range dict set bool bytes ' " ( ) [ ] { } + - * / % = ! > < and or not is in True False none for while if else elif pass break continue def return class import dir from as open read readline close write : . _ , ; number string variable space None
Variables:
START ASSIGN ALPHABET WHOLEWORD ESCAPE VARIABLE BACKVARIABLE VALUE INTEGER STRING FLOAT BOOLEAN ALLNUMBERS LIST SET DICTIONARY TUPLE NEGATIVEINTEGER NEGATIVEFLOAT OPERATORS COMPARISON ASSIGNMENT FOR WHILE PRINT ASSIGNMENT COMMENT BREAK PASS CONTINUE WHILE FOR IMPORT CLASS LOOPVARIABLE DEF IF ELIF ELSE INPUT RETURN TYPECASTING TEXT FROM IFONELINE FORFOR METHOD ELEMENT
Productions:
START -> START START | VARIABLE ASSIGN ASSIGNMENT | METHOD ASSIGN ASSIGNMENT | IF | ELIF | ELSE | PRINT | FOR | WHILE | DEF | CLASS | IMPORT | FROM | COMMENT | VARIABLE ASSIGN ITERABLES | VARIABLE ASSIGN IFONELINE | RETURN | METHOD | BREAK | CONTINUE;
ASSIGN -> = | + = | - = | * = | + = | - = | * = | / = | % = | / / = | * * =;
SPACE -> space;
TEXT -> TEXT TEXT | string;
STRING -> ' TEXT ' | " TEXT " | STRING + STRING;
INTEGER -> number;
VARIABLE -> variable;
COMPARISON -> < | > | < = | > = | ! = | = =;
BOOLEAN -> ( BOOLEAN ) | True | False | BOOLEAN and BOOLEAN | BOOLEAN or BOOLEAN | not BOOLEAN | VALUE is VALUE | VALUE is not VALUE | VALUE COMPARISON VALUE;
VALUE -> ( VALUE ) | INTEGER | STRING | BOOLEAN | VALUE COMPARISON VALUE | VALUE OPERATORS VALUE | None | METHOD;  
OPERATORS -> / / | + | - | * * | % | * | /;
PRINT -> print ( VALUE );
COMMENT -> # TEXT | " " " TEXT " " " | ' ' ' TEXT ' ' ';
FORFOR -> INTEGER | VARIABLE;
FOR -> for VARIABLE in range ( FORFOR ) : | for VARIABLE in range ( FORFOR , FORFOR ) : | for VARIABLE in range ( FORFOR , FORFOR , FORFOR ) : | for VARIABLE in FORFOR : | for VARIABLE in range ( FORFOR ) : START | for VARIABLE in range ( FORFOR , FORFOR ) : START | for VARIABLE in range ( FORFOR , FORFOR , FORFOR ) : START | for VARIABLE in FORFOR : START | for VARIABLE in STRING : START;
BREAK -> break;
PASS -> pass;
CONTINUE -> continue;
WHILE -> while BOOLEAN : | while BOOLEAN : START;
IMPORT -> import LOOPVARIABLE | import VARIABLE as VARIABLE;
FROM -> from VARIABLE IMPORT;
CLASS -> class VARIABLE :;
LOOPVARIABLE -> LOOPVARIABLE , LOOPVARIABLE | VARIABLE | STRING | INTEGER | BOOLEAN | START;
DEF -> def VARIABLE ( LOOPVARIABLE ) : | def VARIABLE ( ) :;
IFONELINE -> VALUE if BOOLEAN | VALUE if BOOLEAN else VALUE | VALUE if BOOLEAN else IFONELINE;
IF -> if BOOLEAN : | if VARIABLE :;
ELIF -> elif BOOLEAN : | elif VARIABLE :;
ELSE -> else :;
INPUT -> input ( STRING ) | TYPECASTING ( INPUT ) | input ( );
RETURN -> return | return BOOLEAN | return VARIABLE | return STRING | return INTEGER;
TYPECASTING -> float | int | complex;
ITERABLES -> LIST | TUPLE | SET | DICTIONARY;
ELEMENT -> ELEMENT , ELEMENT | STRING | INTEGER | VARIABLE | BOOLEAN;
LIST -> [ ELEMENT ] | [ LIST ];
TUPLE -> ( ELEMENT ) | ( TUPLE );
SET -> { ELEMENT } | { SET };
DICTELEMENT -> DICTELEMENT , DICTELEMENT | " VARIABLE " : STRING | " VARIABLE " : DICTIONARY;
DICTIONARY -> { DICTELEMENT };
ASSIGNMENT -> VARIABLE | VALUE | VALUE OPERATORS VALUE | INPUT | METHOD | LIST | SET | TUPLE | DICTIONARY;
METHOD -> METHOD . METHOD | VARIABLE . VARIABLE | VARIABLE . VARIABLE ( ) | VARIABLE ( ) | VARIABLE ( LOOPVARIABLE ) | VARIABLE . VARIABLE ( LOOPVARIABLE )